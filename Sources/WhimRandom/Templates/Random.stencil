// for stencil reference see: https://stencil.fuller.li/en/latest/index.html
// for sourcery reference see: https://cdn.rawgit.com/krzysztofzablocki/Sourcery/master/docs/index.html
// swiftlint:disable all

{# TODO: Take care of generics and classes (use their initializers) #}
import Foundation
import WhimRandom
{# So far getting imports hardcoded from config, correct approach might be found here: https://github.com/krzysztofzablocki/Sourcery/issues/670 #}
{% for import in argument.imports %}
import {{ import }}
{% endfor %}

{% if argument.testable %}{% for testable in argument.testable %}
@testable import {{ testable }}
{% endfor %}{% endif %}

{% macro randomValue type %}{% if type.kind == "protocol" %}{{ type.inheritedTypes.0.name }}{% endif %}{% endmacro %}
    
// MARK: - Structs

{# Random Struct #}
    
{% macro rng %}&{{ argument.rng }}{% endmacro %}
{% macro customRandomValueType variable %}{% if variable.annotations.random %}{{ variable.annotations.random }}{% endif %}{% endmacro %}
{% macro randomValueUsingGenerator variable %}{% call customRandomValueType variable %}{% if variable.isTuple %}randomTuple(using: &generator){% else %}.random(using: &generator){% endif %}{% endmacro %}
{% macro randomValueUsingRNG variable %}{% call customRandomValueType variable %}{% if variable.isTuple %}randomTuple(using: {% call rng %}){% else %}.random(using: {% call rng %}){% endif %}{% endmacro %}
{% macro variableGenericTypeName variable %}{{ variable.typeName.generic.name }}<{% for tp in variable.typeName.generic.typeParameters %}{{ tp.typeName }}{% if not forloop.last %}, {% endif %}{% endfor %}>{% if variable.typeName.isOptional %}?{% endif %}{% endmacro %}
{% macro variableTypeName variable %}{% if variable.typeName.isArray %}{{ variable.typeName.array.name }}{% elif variable.typeName.isDictionary %}{{ variable.typeName.dictionary.name }}{% elif variable.typeName.isGeneric %}{% call variableGenericTypeName variable %}{% elif not variable.type %}{{ variable.typeName.name }}{% else %}{{ variable.type.name }}{% if variable.typeName.isOptional %}?{% endif %}{% endif %}{% endmacro %}
    
{% for type in types.structs where type|annotated:"Random" %}
{# we're just assuming that if type is generic and some of instance variables don't have 'type', then we're most likely dealing with generic type constraints that need to conform to Random; however just remove this condition if it breaks anything #}
extension {{ type.name }}: Random{% if type.isGeneric %} where {% for variable in type.instanceVariables where not variable.isComputed and not variable.type %}{{ variable.typeName.asSource }}: Random{% if not forloop.last %}, {% endif %}{% endfor %}{% endif %} {
    {% if type.initializers.count == 0 or type.accessLevel != "public" %}
    public static func random<G: RandomNumberGenerator>(using generator: inout G) -> {{ type.name }} {
        return {{ type.name }}(
            {% for variable in type.instanceVariables where not variable.isComputed %}
            {{ variable.name }}: {% call randomValueUsingGenerator variable %}{% if not forloop.last %},{% endif %}
            {% endfor %}
        )
    }

    {% if type.instanceVariables.count > 0 %}
    {% if argument.rng %}
    {# user-friendly version, so that you don't have to bother with closures and incoming generators. But it's tightly coupled to `rng` argument value from sourcery config #}
    static func random(
        {% for variable in type.instanceVariables where not variable.isComputed %}
        {{ variable.name }}: {% call variableTypeName variable %} = {% call randomValueUsingRNG variable %}{% if not forloop.last %},{% endif %}
        {% endfor %}
    ) -> {{ type.name }} {
        return {{ type.name }}(
            {% for variable in type.instanceVariables where not variable.isComputed %}
            {{ variable.name }}: {{ variable.name }}{% if not forloop.last %},{% endif %}
            {% endfor %}
        )
    }
    {% else %}
    {# this one is generated additionally, so that you can have everything random except for some selected fields #}
    static func random<G: RandomNumberGenerator>(
        _ generator: inout G,
        {% for variable in type.instanceVariables where not variable.isComputed %}
        {{ variable.name }}: (inout G) -> {% call variableTypeName variable %} = { generator in {% call randomValueUsingGenerator variable %} }{% if not forloop.last %},{% endif %}
        {% endfor %}
    ) -> {{ type.name }} {
        return {{ type.name }}(
            {% for variable in type.instanceVariables where not variable.isComputed %}
            {{ variable.name }}: {{ variable.name }}(&generator){% if not forloop.last %},{% endif %}
            {% endfor %}
        )
    }
    {% endif %}
    {% endif %}
    {# ---------------- Using public initializer instead of properties ---------------- #}
    {% else %}
    public static func random<G: RandomNumberGenerator>(using generator: inout G) -> {{ type.name }}{% if type.initializers.0.isFailableInitializer %}?{% endif %} {
        return {{ type.name }}(
            {% for param in type.initializers.0.parameters %}
            {% if param.argumentLabel %}{{ param.argumentLabel }}: {% endif %}{% call randomValueUsingGenerator variable %}{% if not forloop.last %},{% endif %}
            {% endfor %}
        )
    }

    {% if argument.rng %}
    {# user-friendly version, so that you don't have to bother with closures and incoming generators. But it's tightly coupled to `rng` argument value from sourcery config #}
    static func random(
        {% for param in type.initializers.0.parameters %}
        {% if param.argumentLabel %}{{ param.argumentLabel }}{% else %}_ {{ param.name }}{% endif %}: {% call variableTypeName param %} = {% call randomValueUsingRNG param %}{% if not forloop.last %},{% endif %}
        {% endfor %}
    ) -> {{ type.name }}{% if type.initializers.0.isFailableInitializer %}?{% endif %} {
        return {{ type.name }}(
            {% for param in type.initializers.0.parameters %}
            {% if param.argumentLabel %}{{ param.argumentLabel }}: {% endif %}{% if param.argumentLabel %}{{ param.argumentLabel }}{% else %}{{ param.name }}{% endif %}{% if not forloop.last %},{% endif %}
            {% endfor %}
        )
    }
    {% else %}
    {# this one is generated additionally, so that you can have everything random except for some selected fields #}
    static func random<G: RandomNumberGenerator>(
        _ generator: inout G,
        {% for param in type.initializers.0.parameters %}
        {{ param.argumentLabel }}: (inout G) -> {% call variableTypeName param %} = { generator in {% call randomValueUsingGenerator param %} }{% if not forloop.last %},{% endif %}
        {% endfor %}
    ) -> {{ type.name }} {
        return {{ type.name }}(
            {% for param in type.initializers.0.parameters %}
            {{ param.argumentLabel }}: {{ param.argumentLabel }}(&generator){% if not forloop.last %},{% endif %}
            {% endfor %}
        )
    }
    {% endif %}
    {% endif %}
}

{% endfor %}
    
// MARK: - Enums

{# Random Enum #}
    
{% macro randomEnumCaseUsingGenerator case %}.{{ case.name }}{% if case.hasAssociatedValue %}({% for value in case.associatedValues %}{% if value.localName %}{{ value.localName }}: {% endif %}{% call randomValueUsingGenerator value %}{% if not forloop.last %}, {% endif %}{% endfor %}){% endif %}{% endmacro %}
{% macro randomIfCaseUsingGenerator case %}{% if case.hasAssociatedValue %}{{ case.name }}(&generator){% else %}.{{ case.name }}{% endif %}{% endmacro %}
{% macro randomEnumCaseUsingRNG case %}.{{ case.name }}{% if case.hasAssociatedValue %}({% for value in case.associatedValues %}{% if value.localName %}{{ value.localName }}: {% endif %}{% call randomValueUsingRNG value %}{% if not forloop.last %}, {% endif %}{% endfor %}){% endif %}{% endmacro %}
{% macro randomIfCaseUsingRNG case %}{% if case.hasAssociatedValue %}{{ case.name }}{% else %}.{{ case.name }}{% endif %}{% endmacro %}
    
{% for enum in types.enums where enum|annotated:"Random" %}
{% if enum.cases.count == 0 %}
#warning("`{{ enum.name }}` is an uninhabitant type and no value of it can be created, thus it can't have random value as well.")
// extension {{ enum.name }}: Random { }
{% elif not enum.hasAssociatedValues %}
extension {{ enum.name }}: Random {
    {# I'd expect to check `enum.based` property, but it's always empty ¯\_(ツ)_/¯ #}
    {% if enum.rawTypeName.name != "CaseIterable" and enum.inheritedTypes|join:" "|!contains:"CaseIterable" %}
    #warning("Please, conform to `CaseIterable` protocol, so that compiler takes care of this")
    public static let allCases: [{{ enum.name }}] = [{% for case in enum.cases %}.{{ case.name }}{% if not forloop.last %}, {% endif %}{% endfor %}]
    {% endif %}

    public static func random<G: RandomNumberGenerator>(using generator: inout G) -> {{ enum.name }} {
        return allCases.randomElement(using: &generator)!
    }
}
{% else %}
extension {{ enum.name }}: RandomAll{% if enum.isGeneric %}, Random where 
    {% map enum.cases into genericTypes using case %}{% map case.associatedValues into genericTypeNames using associated %}{% if not associated.type %}{{ associated.typeName.asSource }}{% else %}{% endif %}{% endmap %}{{ genericTypeNames }}{% endmap %}
    {% map genericTypes into generics using generic %}{{ generic|replace:"[",""|replace:"]",""|replace:'"',"" }}{% endmap %}
    {% for generic in generics|join:" "|replace:",",""|split:" " where generic %}{{ generic }}: Random{% if not forloop.last %}, {% endif %}{% endfor %}{% endif %} {
    public static func allRandom<G: RandomNumberGenerator>(using generator: inout G) -> [{{ enum.name }}] {
        {% if enum.cases.count == 1 %}
        return [{% call randomEnumCaseUsingGenerator enum.cases.0 %}]
        {% else %}
        return [{% for case in enum.cases %}
            {% call randomEnumCaseUsingGenerator case %}{% if not forloop.last %},{% endif %}{% endfor %}
        ]
        {% endif %}
    }

    {% if enum.isGeneric %}
    public static func random<G: RandomNumberGenerator>(using generator: inout G) -> {{ enum.name }} {
        return allRandom(using: &generator).randomElement(using: &generator)!
    }
    {% endif %}

    {#
        alternative version, so that you don't have to bother with closures and incoming generators 
        but it's tightly coupled to `rng` argument value from sourcery config
        and it executes and calculates randoms for all cases even though only one will be needed (thus a bit more expensive)
    #}
    {% if argument.rng %}
    static func random(
        {% for case in enum.cases where case.associatedValues %}
        {{ case.name }}: {{ enum.name }} = {% call randomEnumCaseUsingRNG case %}{% if not forloop.last %},{% endif %}
        {% endfor %}
    ) -> {{ enum.name }} {
        {% if enum.cases.count == 1 %}
        return {% call randomIfCaseUsingRNG enum.cases.0 %}
        {% else %}
        return [
            {% for case in enum.cases %}
            {% call randomIfCaseUsingRNG case %}{% if not forloop.last %},{% endif %}
            {% endfor %}
        ].randomElement(using: {% call rng %})!
        {% endif %}
    }
    {% else %}
    {# same for enum - you can override `random` for some cases and leave others generated by default #}
    static func random<G: RandomNumberGenerator>(
        _ generator: inout G,
        {% for case in enum.cases where case.associatedValues %}
        {{ case.name }}: (inout G) -> {{ enum.name }} = { generator in {% call randomEnumCaseUsingGenerator case %} }{% if not forloop.last %},{% endif %}
        {% endfor %}
    ) -> {{ enum.name }} {
        {% if enum.cases.count == 1 %}
        return {% call randomIfCaseUsingGenerator enum.cases.0 %}
        {% else %}
        return [
            {% for case in enum.cases %}
            {% call randomIfCaseUsingGenerator case %}{% if not forloop.last %},{% endif %}
            {% endfor %}
        ].randomElement(using: &generator)!
        {% endif %}
    }
    {% endif %}
}
{% endif %}

{% endfor %}
